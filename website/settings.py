"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from .logging_config import initialize_logging

from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kog&lll^seax27ju7d3@95qtlpe!az6i)^7h85i5$kfd_d)1&5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG_MODE', 'True') == 'True'


# Disable localhost in production
# TODO: make hosts run-time dynamic
# this is now set in the middleware
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS',
    'localhost').split(';')
# ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS',
#     'localhost;127.0.0.1;127.0.0.2;127.0.0.3;127.0.0.4;miekeservices.soops.intern;\
#     mieke.soops.intern;marketplaces.soops.intern;watches.soops.intern;\
#     bentleys.soops.intern;spaceships.soops.intern;watches.christiaan.intern;\
#     bentleys.christiaan.intern;marketplaces.christiaan.intern;spaceships.christiaan.intern').split(';')
# this is now set in the middleware
CSRF_TRUSTED_ORIGINS = [f'http://{host}:3333' for host in ALLOWED_HOSTS]

USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PROTO = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'modelcluster',
    'taggit',

    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail',

    'shop',
    'shop_customizer'
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]
LOGIN_REDIRECT_URL = "/watches"
LOGOUT_REDIRECT_URL = None
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
         # Add Wagtail middleware
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
    'shop.middleware.DatabaseUserMiddleware',
    # 'shop.middleware.ForwardedPortMiddleware',
]
# Our own defined settings
EMAIL_STRICT_CA = os.environ.get('EMAIL_STRICT_CA', False) == 'True'
EMAIL_CA_PATH =  os.environ.get('EMAIL_CA_PATH')
EMAIL_WRITE_TO_CONSOLE = os.environ.get('EMAIL_WRITE_TO_CONSOLE', False) == 'True'
# Email backend configuration (for development, use console backend)
EMAIL_BACKENDS = {
    'default': 'customEmailBackend.CustomEmailBackend',
    # 'default': 'django.core.mail.backends.smtp.EmailBackend',
    'console': 'django.core.mail.backends.console.EmailBackend',
}
if EMAIL_WRITE_TO_CONSOLE:
    EMAIL_BACKEND = EMAIL_BACKENDS['console']
else:
    EMAIL_BACKEND = EMAIL_BACKENDS['default']
# DJANGO SMTP SETTINGS
EMAIL_PORT = os.environ.get('EMAIL_PORT', 25)   
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', False) == 'True'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', False) == 'True'
DEFAULT_FROM_EMAIL =  os.environ.get('DEFAULT_FROM_EMAIL', 'marketplaces@soops.nl') 
EMAIL_HOST =  os.environ.get('EMAIL_HOST', 'mx.soops.nl') 
EMAIL_HOST_USER =  os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD =  os.environ.get('EMAIL_HOST_PASSWORD') 

# Allauth settings
ACCOUNT_ADAPTER = 'shop.adapter.ShopAccountAdapter'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = True


WAGTAIL_SITE_NAME = 'My Django-Wagtail Site'

WAGTAILADMIN_BASE_URL = 'http://localhost:3334'

WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']

ROOT_URLCONF = 'website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "shop" / "templates",
            BASE_DIR / "shop_customizer" / "templates",],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages'
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'postgres'),
        'USER': os.environ.get('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', '1234'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': os.environ.get('POSTGRES_PORT', '35432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Amsterdam'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# where static files get copied to:
STATIC_ROOT = BASE_DIR / "staticfiles"
# extraplaces where static files get copied from:
STATICFILES_DIRS = [
    BASE_DIR / "static_files_to_include",
]
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

X_FRAME_OPTIONS = 'ALLOWALL'

initialize_logging(BASE_DIR)


